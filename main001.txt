// standard C
#include <stdio.h>
#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>
#include <math.h>
// inc
#include <inc/hw_types.h>
#include <inc/hw_memmap.h>
#include <inc/hw_ints.h>
// driverlib
#include <driverlib/pin_map.h>
#include <driverlib/sysctl.h>
#include <driverlib/fpu.h>
#include <driverlib/timer.h>
#include <driverlib/interrupt.h>
#include <driverlib/gpio.h>

// OneWire
#include "oneWire.h"

int main(void)
{

	unsigned char data[9];
	oneWireCfg oneWirePort;
	uint16_t iTemp;
	int i, j;
	searchRomCfg allRoms;
	FPULazyStackingEnable();
	SysCtlClockSet(SYSCTL_SYSDIV_2_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);

	/*
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
    GPIOPinConfigure(GPIO_PA0_U0RX);
    GPIOPinConfigure(GPIO_PA1_U0TX);
    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    UARTStdioConfig(0, 115200, SysCtlClockGet());
	 */

	//leds_init();

	// Configuramos el pin, puerto y timer a utilizar
	// Puerto
	oneWirePort.periphGPIO = SYSCTL_PERIPH_GPIOD;
	oneWirePort.portGPIO = GPIO_PORTD_BASE;
	oneWirePort.pinGPIO = GPIO_PIN_6;
	oneWirePort.pinTimerId = 1;

	oneWireInit(&oneWirePort);
	oneWireResetPulse(&oneWirePort);
	oneWireSearchInit(&allRoms, MAXDEVS);
	oneWireSearchDev(&oneWirePort, &allRoms, 0);
	/*
    for(i = 0; i <= allRoms.cantRoms; i++)
    {
    	UARTprintf("ROM %d:\n\t", i);

    	for(j = 0; j < 8; j++)
    		UARTprintf(" %02x ", allRoms.roms[i].rom[j]);
    	UARTprintf("\n");
    }
	 */
	while(1)
	{
		for(i = 0; i <= allRoms.cantRoms; i++)
		{
			oneWireResetPulse(&oneWirePort);
			oneWireSelectDev(&oneWirePort, allRoms.roms[i].rom);
			oneWireConvertTemp(&oneWirePort);


			oneWireResetPulse(&oneWirePort);
			oneWireSelectDev(&oneWirePort, allRoms.roms[i].rom);
			oneWireReadMem(&oneWirePort, data);

			if(!oneWireReadMem(&oneWirePort, data)){
				iTemp = data[1];
				iTemp = iTemp << 8;
				iTemp = iTemp | data[0];
				SysCtlDelay(50);
			}

			//UARTprintf("Sensor %d temp= %d\n", i, iTemp);
		}
		timerDelayMs(5000);
	}
}

